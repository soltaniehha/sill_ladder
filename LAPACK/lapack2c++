#!/usr/bin/perl -w-	# edit in -*-perl-*- mode

# Copyright 1996 by Michael Haggerty <mhagger@blizzard.harvard.edu>.
# This file may be used, copied, or modified under the condition that
# this copyright notice be retained.  I make no guarantees regarding
# this program.  If it is useful to you, please drop me an email!

sub usage
{
  print STDERR <<"----End----"
usage: lapack2c++
  prints to stdout a C++ prototype that should be usable with C++ for the
  FORTRAN LAPACK function defined on stdin.  Note that this routine depends
  on the consistent documentation style of the LAPACK routines, and is not
  general enough to deal with an arbitrary FORTRAN program.  In fact,
  it chokes on several of the LAPACK routines, too.
----End----
    ;
}

@read_ahead = ();
%types = ();
%dims = ();
%io = ();

# This is the translation table from fortran types to C++ types:
%type_conv = (
              'character' => 'char',
              'character*1' => 'char',
              'character*(*)' => 'char',
              'integer' => 'int',
              'real' => 'float',
              'real*4' => 'float',
              'real*8' => 'double',
              'complex' => 'complex<float>',
              'complex*8' => 'complex<float>',
              'complex*16' => 'complex<double>',
              'logical' => 'int',
              'double precision' => 'double',
              'double complex' => 'complex<double>',
              );
# define a regexp for matching a type, by mashing together values from
# the above table.
@type_regexp = ();
foreach (keys(%type_conv)) {
  s/(\W)/\\$1/g; # quote special characters
  s/\s+/\s+/g; # allow arbitrary whitespace
  s/\\\*/\\s*\\*\\s*/g; # allow whitespace around stars
  push(@type_regexp, $_);
}
$type_regexp = '(?:' . join('|', reverse(sort(@type_regexp))) . ')';

$id_regexp = "\\w[\\w\\d]*"; # matches identifiers

$dim_regexp = "(?:\\*|$id_regexp|\d+)";

%io_conv = (
            'input' => 'const ',
            'output' => '',
            'input/output' => '',
            'workspace' => '',
            'workspace/output' => '',
            'input or output' => '',
            );
# define a regexp for matching an io:
@io_regexp = ();
foreach (keys(%io_conv)) {
  s/(\W)/\\$1/g; # quote special characters
  push(@io_regexp, $_);
}
$io_regexp = '(?:' . join('|', reverse(sort(@io_regexp))) . ')';

for (; ; ) {
  $_ = &get_line();
  /^$/ && die("No subroutine declaration\n");
  (substr($_, 0, 1) ne ' ') && next; # comment
  s/^......//;
  if (($fn_name, $params) =
      /^\s*subroutine\s+($id_regexp)\s*\((.*)\)\s*$/o) {
    $fn_type = '';
    last;
  }
  if (($fn_type, $fn_name, $params) =
      /^\s*($type_regexp)\s+function\s+($id_regexp)\s*\((.*)\)\s*$/o) {
    defined($type_conv{$fn_type}) ||
        die("Function of undefined type\n");
    last;
  }
}

$params =~ s/^\s+//;
$params =~ s/\s+$//;

# get just the list of parameter names in order:
@params = split(/\s*\,\s*/, $params);
foreach (@params) {
  /^$id_regexp$/o || die("Unrecognized parameters' format in '$_'\n");
  $types{$_} = ''; # indicate that it needs a value
}

# the next non-comment lines should be the dummy parameter declarations
for (; ; ) {
  $_ = &get_line();
  /^$/ && die("EOF looking for declarations\n");
  /^\S.*purpose/ && (unread_line($_), last);
  /^\S/ && next;
  s/^ [ \d]{4} \s*// || die;
  (($type, $_) = /^($type_regexp)\s+(.*\S)\s*$/o) ||
      die("Declaration format\n");
  $type =~ s/  +/ /g;
  $type =~ s/ \*/*/g;
  $type =~ s/\* /*/g;
  while (! /^$/) {
    s/^($id_regexp)\s*//o ||
        die("Declaration id instance\n");
    $var = $1;
    defined($types{$var}) ||
        (warn("Declaration for non-parameter $var\n"), $types{$var} = '');
    ($types{$var} eq '') ||
        die("Parameter $var multiply declared\n");
    $types{$var} = $type;

    if (s/^\(\s*([^\)]*\S)\s*\)\s*//o) {
      $dim = $1;
      # put dimension in canonical form
      $dim =~ /^$dim_regexp(\s*\,\s*$dim_regexp)*$/o ||
          die("Incorrect dimensions $dim for $var\n");
      $dim =~ s/\s*\,\s*/ /g;
      $dims{$var} = $dim;
    }
    else {
      $dims{$var} = '';
    }
    s/^\,\s*// || (/^$/, last) ||
        die("Declaration succession\n");
  }
}

foreach (keys(%types)) {
  ($types{$_} =~ /^$/) && die("Declaration missing for parameter $_\n");
}

# next we want to look for the ``arguments'' part of the comments:
for (; ; ) {
  $_ = &get_line();
  /^$/ && die("EOF looking for ``arguments''\n");
  /^ / && die("Found statement before ``arguments''\n");
  /^.\s+arguments\s*$/ && last;
}

$_ = &get_line();
/^\S\s+\=+\s*$/ || die("No line after ``arguments''\n");

for (; ; ) {
  $_ = &get_line();
  /^$/ && die("EOF parsing arguments\n");
  /^ / && die("Statement while parsing arguments\n");
  /^\S\s+\={50,}\s*$/ && last;
  /^\S\s+internal parameters\s*$/ && last;
  /^\S\s+further details\s*$/ && last;
  if (s/^\S  ($id_regexp)\s*//o) {
    # this should be a new variable description
    $var = $1;

    # it might be that multiple variables are described on a line:
    if (s/^\,\s*($id_regexp\s*(\,\s*$id_regexp\s*)*)//) {
      &unread_line("*  $1 $_");
    }

    defined($types{$var}) || die("Argument $var was not a parameter\n");
    s/^\s*\(($io_regexp)\)\s*//o ||
        die("No input/output specification for $var\n");
    $io = $1;
    $io{$var} = $io;

    # now find the type
    s/^($type_regexp)\s*//o ||
        die("Couldn't find type for argument $var\n");
    $type = $1;
    $type =~ s/  +/ /g;
    $type =~ s/ \*/*/g;
    $type =~ s/\* /*/g;
    $type eq $types{$var} || $type eq ($types{$var} . '*1') ||
        die("Arg type for $var doesn't match declaration type\n");
    if (s/^array\,?\s*//) {
      # handle, one way or another, as an array
      if (s/^dimension\s*\(\s*(.*\S)\s*\)$/$1/) {
        @dim_dec = split(' ', $dims{$var}); # the dims that must be matched
        for $i (0 .. $#dim_dec - 1) {
          # these should be simple variable values
          $dim_dec[$i] eq '*' &&
              die("Unspecified dimension is not last\n");
          s/^$dim_dec[$i]\s*\,\s*// ||
              die("Could not match simple dimension for arg $var\n");
        }
        $i = $#dim_dec;
        if ($dim_dec[$i] eq '*') {
          # make sure that the arg dimension is not obviously still a list:
          /^\w+\s*\,/ &&
              die("Number of dimensions for arg $var seems wrong\n");
          # use the arg dimension from now on
          $dim_dec[$i] = $_;
        }
        else {
          # last dimension specified
          $dim_dec[$i] eq $_ ||
              die("Last dimensions don't match\n");
        }
        $dims{$var} = '[' . join('][', reverse(@dim_dec)) . ']';
      }
      else {
        # dimension is unknown, like for a work array
        $dims{$var} ne '' ||
            die("array/scalar conflict for $var\n");
        warn("Warning: Undocumented dimensions in argument $var\n");
        $dims{$var} = '[' .
            join('][', reverse(split(' ', $dims{$var}))) .
                ']';
        $dims{$var} =~ s/\*/\?/g;
      }
    }
    else {
      # it should be a scalar
      /^$/ && $dims{$var} eq '' ||
          die("Array dimensions problematic for $var\n");
    }
  }
}

# OK, we have all the information; now print the C++ prototype:
print("#ifdef __cplusplus\n");

if ($fn_type eq '') {
  $fn_type = 'void';
}
else {
  $fn_type = $type_conv{$fn_type};
}
print('extern "C" ', $fn_type, ' ', $fn_name, "_(\n");

@args = @params;
@comments = ();
for $i (0 .. $#params) {
  $_ = $params[$i];

  # schema for rendering fortran parameters to C++:
  if ($dims{$_} eq '') {
    # this is a scalar
    if ($types{$_} eq 'character*(*)') {
      $args[$i] = $io_conv{$io{$_}} .
          $type_conv{$types{$_}} . ' ' .
              '*' . $_;
      $comments[$i] = '(' . $io{$_} . ')';
      push(@args, 'ftnlen length_' . $_);
      $comments[$#args] = 'Length of string ' . $_;
    }
    else {
      $args[$i] = $io_conv{$io{$_}} .
          $type_conv{$types{$_}} . ' ' .
              '&' . $_;
      $comments[$i] = '(' . $io{$_} . ')';
    }
  }
  else {
    # some kind of vector or array
    $args[$i] = $io_conv{$io{$_}} .
        $type_conv{$types{$_}} . ' ' .
            '*' . $_;
    $comments[$i] = $_ . $dims{$_} . ' (' . $io{$_} . ')';
    $type_conv{$types{$_}} eq 'char' &&
        die("Don't know how to deal with aggregates of char\n");
  }
}

for $i (0 .. $#args - 1) {
  print("\t", &tab_pad($args[$i] . ","), "// " . $comments[$i] . "\n");
}

print("\t", &tab_pad($args[$#args]), "// " . $comments[$#args] . "\n");

print("\t);\n");

print("#else /* ! __cplusplus */\n");

# now the same for C:
# === Close copy of above ===========================================
$fn_type =~ s/complex\<(double|float)\>/complex_$1/;
print($fn_type, ' ', $fn_name, "_(\n");

@args = @params;
@comments = ();
for $i (0 .. $#params) {
  $_ = $params[$i];

  # schema for rendering fortran parameters to C:
  if ($dims{$_} eq '') {
    # this is a scalar
    if ($types{$_} eq 'character*(*)') {
      $args[$i] = $io_conv{$io{$_}} .
          $type_conv{$types{$_}} . ' ' .
              '*' . $_;
      $comments[$i] = '(' . $io{$_} . ')';
      push(@args, 'ftnlen length_' . $_);
      $comments[$#args] = 'Length of string ' . $_;
    }
    else {
      $args[$i] = $io_conv{$io{$_}} .
          $type_conv{$types{$_}} . ' ' . '*' . $_;
      $comments[$i] = '(' . $io{$_} . ')';
    }
  }
  else {
    # some kind of vector or array
    $args[$i] = $io_conv{$io{$_}} .
        $type_conv{$types{$_}} . ' ' .
            '*' . $_;
    $comments[$i] = $_ . $dims{$_} . ' (' . $io{$_} . ')';
    $type_conv{$types{$_}} eq 'char' &&
        die("Don't know how to deal with aggregates of char\n");
  }
}

for $i (0 .. $#args - 1) {
  $args[$i] =~ s/complex\<(double|float)\>/complex_$1/;
  print("\t", &tab_pad($args[$i] . ","), "/* " . $comments[$i] . " */\n");
}

$args[$#args] =~ s/complex\<(double|float)\>/complex_$1/;
print("\t", &tab_pad($args[$#args]), "/* " . $comments[$#args] . " */\n");

print("\t);\n");

# ======================================================================

print("#endif /* ! __cplusplus */\n\n");





sub tab_pad
{
  local($_);
  $_ = $_[0];
  $_ .= "\t" x ((39 - length($_)) / 8);
  return $_;
}


# get a FORTRAN logical line, including continuation lines if present.
sub get_line
{
  local($line, $_);

  $line = $_ = &read_line();
  $_ eq '' && return '';
  (substr($_, 0, 1) ne ' ') && return(($_));

  for (; ; ) {
    $_ = &read_line();
    ($_ eq '') && return $line;
    if (substr($_, 0, 1) ne ' ' || substr($_, 5, 1) eq ' ') {
      &unread_line($_);
      return $line;
    }
    else {
      $line .= ' ' . substr($_, 6);
    }
  }
}


sub read_line
{
  local($_);

  if ($#read_ahead + 1 == 0) {
    eof(STDIN) && return '';
    $_ = <STDIN>;
    chop($_);
    ($_ eq '') && ($_ = '*'); # turn blank lines into comments
  }
  else {
    $_ = shift(@read_ahead);
  }
  length($_) > 72 &&
      die("Line longer than 72 characters\n");
  /\t/ &&
      die("Tab found in the input\n");
  /^([^ ])|(.[ 0-9]{4}.)/ ||
      die("Unexpected data in columns 1..6\n");
  tr/A-Z/a-z/;
  $_;
}


sub unread_line
{
  unshift(@read_ahead, @_);
}


